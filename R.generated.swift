//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MainViewController`.
    static let mainViewController = _R.storyboard.mainViewController()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MainViewController", bundle: ...)`
    static func mainViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainViewController)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 7 files.
  struct file {
    /// Resource file `adventpro-bold.ttf`.
    static let adventproBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "adventpro-bold", pathExtension: "ttf")
    /// Resource file `adventpro-extralight.ttf`.
    static let adventproExtralightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "adventpro-extralight", pathExtension: "ttf")
    /// Resource file `adventpro-light.ttf`.
    static let adventproLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "adventpro-light", pathExtension: "ttf")
    /// Resource file `adventpro-medium.ttf`.
    static let adventproMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "adventpro-medium", pathExtension: "ttf")
    /// Resource file `adventpro-regular.ttf`.
    static let adventproRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "adventpro-regular", pathExtension: "ttf")
    /// Resource file `adventpro-semibold.ttf`.
    static let adventproSemiboldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "adventpro-semibold", pathExtension: "ttf")
    /// Resource file `adventpro-thin.ttf`.
    static let adventproThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "adventpro-thin", pathExtension: "ttf")

    /// `bundle.url(forResource: "adventpro-bold", withExtension: "ttf")`
    static func adventproBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adventproBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "adventpro-extralight", withExtension: "ttf")`
    static func adventproExtralightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adventproExtralightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "adventpro-light", withExtension: "ttf")`
    static func adventproLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adventproLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "adventpro-medium", withExtension: "ttf")`
    static func adventproMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adventproMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "adventpro-regular", withExtension: "ttf")`
    static func adventproRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adventproRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "adventpro-semibold", withExtension: "ttf")`
    static func adventproSemiboldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adventproSemiboldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "adventpro-thin", withExtension: "ttf")`
    static func adventproThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adventproThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 7 fonts.
  struct font: Rswift.Validatable {
    /// Font `AdventPro-Bold`.
    static let adventProBold = Rswift.FontResource(fontName: "AdventPro-Bold")
    /// Font `AdventPro-ExtraLight`.
    static let adventProExtraLight = Rswift.FontResource(fontName: "AdventPro-ExtraLight")
    /// Font `AdventPro-Light`.
    static let adventProLight = Rswift.FontResource(fontName: "AdventPro-Light")
    /// Font `AdventPro-Medium`.
    static let adventProMedium = Rswift.FontResource(fontName: "AdventPro-Medium")
    /// Font `AdventPro-Regular`.
    static let adventProRegular = Rswift.FontResource(fontName: "AdventPro-Regular")
    /// Font `AdventPro-SemiBold`.
    static let adventProSemiBold = Rswift.FontResource(fontName: "AdventPro-SemiBold")
    /// Font `AdventPro-Thin`.
    static let adventProThin = Rswift.FontResource(fontName: "AdventPro-Thin")

    /// `UIFont(name: "AdventPro-Bold", size: ...)`
    static func adventProBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: adventProBold, size: size)
    }

    /// `UIFont(name: "AdventPro-ExtraLight", size: ...)`
    static func adventProExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: adventProExtraLight, size: size)
    }

    /// `UIFont(name: "AdventPro-Light", size: ...)`
    static func adventProLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: adventProLight, size: size)
    }

    /// `UIFont(name: "AdventPro-Medium", size: ...)`
    static func adventProMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: adventProMedium, size: size)
    }

    /// `UIFont(name: "AdventPro-Regular", size: ...)`
    static func adventProRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: adventProRegular, size: size)
    }

    /// `UIFont(name: "AdventPro-SemiBold", size: ...)`
    static func adventProSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: adventProSemiBold, size: size)
    }

    /// `UIFont(name: "AdventPro-Thin", size: ...)`
    static func adventProThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: adventProThin, size: size)
    }

    static func validate() throws {
      if R.font.adventProBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AdventPro-Bold' could not be loaded, is 'adventpro-bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.adventProExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AdventPro-ExtraLight' could not be loaded, is 'adventpro-extralight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.adventProLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AdventPro-Light' could not be loaded, is 'adventpro-light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.adventProMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AdventPro-Medium' could not be loaded, is 'adventpro-medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.adventProRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AdventPro-Regular' could not be loaded, is 'adventpro-regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.adventProSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AdventPro-SemiBold' could not be loaded, is 'adventpro-semibold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.adventProThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AdventPro-Thin' could not be loaded, is 'adventpro-thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `TopBar`.
    static let topBar = _R.nib._TopBar()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TopBar", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.topBar) instead")
    static func topBar(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.topBar)
    }
    #endif

    static func topBar(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.topBar.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _TopBar: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TopBar"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mainViewController.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mainViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController

      let bundle = R.hostingBundle
      let name = "MainViewController"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
